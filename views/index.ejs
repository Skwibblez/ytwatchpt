<!doctype html>
<html>
  <head>
    <meta charset="UTF-8" />
    <html lang="en-US">
    <link rel="stylesheet" href="styles.css">
    <title>Amane a best</title>
  </head>
  <body>
    <ul id="messages"></ul>
    <p id="userCnt"> Connected users </p>
    <div class = "flex-container">
        <div>
          <div id="player"></div>
          <br><button type="button" id="playButton" onclick="playVideo()">(⁄ ⁄>⁄ ▽ ⁄<⁄ ⁄) </button>
          <button type="button" id="pauseButton" onclick="pauseVideo()"> ٩(ఠ益ఠ)۶</button>

          <div id ="progressBar" style="width: 600px; height: 35px; margin-left: 10px;">
            <div id="line" style="border: 1px solid black;width: 600px;height: 0px;top: 50%;position: relative"></div>
            <div id = "square" style="height: 15px;width: 15px;position: relative;border-width: 2px;border-style: solid;top: 8.5px;left: 0%"></div>
          </div>

          <div id="buttonset">
            <!-- <br><button type="button" onclick="test()">Test button >///< </button>
            <br><button type="button" onclick="autoplay()">Randomize tbi >///< </button> -->
            <br><input id = "vidDisplay" type = "button" value="Hide >///<" onclick="videoDisplay()"/>
          </div>
          <form action="">
            <tr>
              <td>YouTube Link: </td>
              <td><input id="v" autocomplete="off" /><button>Video</button></td>
            </tr>
          </form>
        </div>

        <div id="tableDiv">
          <table id="myTableData"  border="1" cellpadding="2">
            <thead>
              <tr>
                  <th id="row_col">&nbsp;</th>
                  <th id="song_col"><b>Song</b></th>
                  <th id="link_col"><b>Link</b></th>
                  <th id="int_col"><b>Int</b></th>
                  <th id="play_col"><b>Play </b></th>
                  <th id="del_col"><b>Delete</b></th>
              </tr>
            </thead>
            <% for(var i = 0; i < songs.length; i++) {%>
                <tr>
                    <td><%=songs[i].row_num%></td>
                    <td id="song_col"><%=songs[i].song_name%></td>
                    <td><%=songs[i].link%> </td>
                    <td>1</td>
                    <td><input type="button" value = "Play" onClick="Javacsript:playRow(this)"></td>
                    <td><input type="button" value = "Delete" onClick="Javacsript:deleteRow(this)"></td>
                </tr>
            <% } %>
          </table>

        </div>
    </div>

<!--=============================== JavaScript below=======================================----->

    <script src = "/socket.io/socket.io.js"></script>
    <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
    <!-- the magic is HERE -->
    <script>
    ////////  START ///////////////
      var socket = io();
      var tag = document.createElement('script');
      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
      var player;
      var autoplay = true;
      var runningIndex = 1;
      //For updating new users
      var newUser = true;
      var totalUsers = 1;

      ////////END ///////////////
      /////Adding timeline///////
      var bar = document.getElementById('progressBar');
      var progressBar = $('.progressBar');
      var progressSquare = $('#square');
      bar.addEventListener('click',function(e){
        //console.log("Progress bar has been clicked");
        var difOffset = (e.pageX - this.offsetLeft)/600 * 100;
        //console.log("Offset: " +difOffset);
        //Translate offset into time and call seek
        //Convert offSet into time
        var seekTime = difOffset * player.getDuration() / 100;
        //console.log("Fraction: " + seekTime);
        //var fraction = difOffset * player.getCurrentTime()/player.getDuration()*100;
        progressSquare.css("left",difOffset.toString() + "%");  //Moves square to correct position
        //Need to emit
        socket.emit('progress bar seek', seekTime);
        //player.seekTo(seekTime,true);
      });

      socket.on('client bar seek',function(seekTime){
        //console.log("client bar seek detected")
        player.seekTo(seekTime,true);
      });
      /////End timeline////////

      var table = document.getElementById("myTableData");
      var rowNum = myTableData.rows[table.rows.length-1].cells[0].innerHTML; //Get row_num of last column
      rowNum++;
      var autoRowNum = 1;
      //console.log(rowNum);

      if(rowNum == "&nbsp;"){
        rowNum = 1;
      }else if(isNaN(rowNum)){
        //console.log("NUMBER IS NAN aka error")
        rowNum = 1;
      }

      //console.log("Table data: " + myTableData.rows[table.rows.length-1].cells[0].innerHTML)
      //console.log("Row num: " + rowNum)

      $(function () {
        //Main search function
        $('form').submit(function(e){
          e.preventDefault(); // prevents page reloading
          if($('#v').val() !== ''){   //If valid input
            //socket.emit('video link', $('#v').val());   //Sends object to server
            //String parser here -- should use YT API later
            var n = $('#v').val().indexOf("=");
            var length = $('#v').val().length;
            if(n !== -1){   //Checking for specific ID
              var vid_id = $('#v').val().substring(n+1, length)
              var requestLink = gapi.client.youtube.videos.list({
                part:"snippet",
                id: vid_id
              });
              requestLink.execute(function(response){
                var results = response.result;
                var client_url = $('#v').val().substring(n+1, length);
                var song_name = results.items[0].snippet.title;
                var message_detail_link = [rowNum, song_name, client_url];
                socket.emit('db vid link', message_detail_link);  //Send data to server
                rowNum++;
                //console.log("In request song name(title): " + song_name)
                //console.log("Client_string" + client_url)
                $('#v').val('');  //Reset textfield
              });
            }else{
              //Can search any string and use 1st video based on relevance
              var request = gapi.client.youtube.search.list({
                part:"snippet",
                type:"video",
                q: $("#v").val(),
                maxResults: 1,
                order: "relevance"
              });
              request.execute(function(response){
                var results = response.result;
                $.each(results.items, function(index,item){
                  var client_url = item.id.videoId
                  var song_name = results.items[0].snippet.title;
                  var message_detail_searched = [rowNum,song_name, client_url];
                  socket.emit('db vid link', message_detail_searched);  //Send data to server
                  rowNum++;
                  //console.log("ID: " + item.id.videoId);
                  //console.log("In request song name(title): " + song_name)
                  //console.log("Client_url" + client_url)
                  $('#v').val('');
                });
              });//execute
              //End api addition
            }
            //console.log("Length: " + length);
            //console.log("Index: " + n);
          }else{
            alert("Empty search");
          }//else
          return false;
        }); //form function

      }); //end of $function
      //ADD CLIENT SOCKETS HERE
      socket.on('video link', (video) => {
        //console.log(video[1]); //Just pass the object to view it
        var link = "https://www.youtube.com/embed/" + video[2];
        var table = document.getElementById("myTableData");   //Append to table

        if(link.length > 60){
          alert("Foh nga");
          return; //use this in real code -- leave along for testing purposes
        }

        var song =  video[1];
        var integrity = 0;
        //Buttons
        var playAll = '<input type="button" value = "Play" onClick="Javacsript:playRow(this)">';  //Change to button
        var deleteButton = '<input type="button" value = "Delete" onClick="Javacsript:deleteRow(this)">';

        //Insert data into row into table
        var rowCount = table.rows.length;
        var row = table.insertRow(rowCount);
        let tableHeader2 = [video[0], song, link,integrity, playAll, deleteButton]

        //console.log("Total rows: " + rowCount);
        for(var i = 0; i < tableHeader2.length; i++){
            row.insertCell(i).innerHTML = tableHeader2[i];
        }
        rowNum = myTableData.rows[table.rows.length-1].cells[0].innerHTML;
        rowNum++;
        //console.log("Adding New row num: " + rowNum)
        if(isNaN(rowNum)){
          rowNum = 1;
          //console.log("Adjusting adding row num: " + rowNum)
        }
        document.getElementById("v").value = "";  //Reset textfield value
        document.getElementById("v").focus();
      });

      socket.on('delete row', function(row){
        // var index = row.parentNode.parentNode.rowIndex;   //Pass index for deletion
        var table = document.getElementById("myTableData");
        table.deleteRow(row);
        rowNum = myTableData.rows[table.rows.length-1].cells[0].innerHTML;
        rowNum++;
        //console.log("Deleting row: " + row);
        //console.log("New row num: " + rowNum)
        if(isNaN(rowNum)){
          rowNum = 1;
          //console.log("Adjusting row num: " + rowNum)
        }
        //console.log("Deleting row: " + row);
      });

      socket.on('play row', function(row){
        //console.log("Play row detected")
        //console.log("Playing row: " + row);
        runningIndex = row;
        var x = document.getElementById("myTableData").rows[row].cells;
        var newLink = x[2].innerHTML;     //Invisible space added at end for some reason
        //console.log("start"+newLink+"end")
        //console.log("Length: " + newLink.length)
        if(newLink != ""){
          //Bad fix -- links from db have extra char but newly added songs dont
          if(x[3].innerHTML == 0){
              var inputVideo = newLink + "?autoplay=1";
              //console.log("0 detected")
          }else{
            var inputVideo = newLink.substring(0,newLink.length-1) + "?autoplay=1";
          }
          player.loadVideoByUrl(inputVideo);  //Video baseds on url || can do id
          //console.log("InputVid: " + inputVideo);
          //console.log("Successfully inputted!");
        }else{
          //console.log("Link is empty");
        }
      });

      socket.on('hide video', function(){
        var z = document.getElementById("player");
        if (z.style.display === "none") {
          z.style.display = "block";
          document.getElementById("vidDisplay").value = "Hide >///<";
        } else {
          z.style.display = "none";
          document.getElementById("vidDisplay").value = "Show oWo";
        }
      });

      socket.on('count users', function(numUsers){
        //console.log('User connected' + numUsers);
        totalUsers = numUsers;
        document.getElementById("userCnt").innerHTML = "Connected Users: " + numUsers;
      });

      socket.on('output title', function(newTitle){
        //console.log("Client side title: " + newTitle);
      });

      socket.on('client play', function(){
        player.playVideo();
      });

      socket.on('client pause', function(){
        player.pauseVideo();
      });

      socket.on('client autoplay', function(auto_link){
        //console.log("client autoplay detected");
        //console.log("Should play row: " + autoRowNum) //Add 1 to this
        //Check if next row exists
        var table_row_len = table.rows.length;
        //console.log('Table len = ' + table_row_len);
        var autoplayer_link = auto_link + "?autoplay=1";
        // autoplayer_link = autoplayer_link + "?autoplay=1";
        //console.log("autoplayer post concat: " + autoplayer_link)
        player.loadVideoByUrl(autoplayer_link);
      });

      socket.on('update running_index',function(newIndex){
        runningIndex = newIndex;
        //console.log("Update running index detected - new index = " + runningIndex)
      });

      socket.on('test outside func',function(){
        //console.log("Test outside func works!");
      });

      //Try to modularize the files by adding main.js but currently page refreshes upon finding main.js
      function deleteRow(obj) {
          //Test how sockets work
          var index = obj.parentNode.parentNode.rowIndex;
          var index_row_num = myTableData.rows[index].cells[0].innerHTML; //Get row_num of last column
          var deletion_arr = [index, index_row_num]
          //console.log("Delete target row num: " + myTableData.rows[index].cells[0].innerHTML)
          socket.emit('delete row', deletion_arr);
          //socket.emit('delete row', $('#v').val()); //I am able to do this <---
      }

      function playRow(obj){
        var index = obj.parentNode.parentNode.rowIndex;
        socket.emit('play row', index);
      }

      function videoDisplay(){
        socket.emit('hide video');
      }
      //Attempt to add YTAPI data
      function init(){
        gapi.client.setApiKey("AIzaSyAok0QgaPlQstcwKOKEOw641a3aRJZ4qmw");
        //console.log("init connected");
        gapi.client.load("youtube", "v3", function(){
          // yt api rdy
        });
      }
      //YT iframe api
      function onPlayerStateChange(event) {
        // if(done){//console.log("Done is true")}
        // else{//console.log("Done is false")}
        ////console.log("entered state change: " + player.getPlayerState())
        //Added this whole thing
        var table_row_len = table.rows.length;
        if(player.getPlayerState() == 0){
          if(autoplay){
            //For circular
            var autoplayer_link;
            if(table_row_len > 1){
              if(runningIndex +1 >= table_row_len){ //End of list
                var x = document.getElementById("myTableData").rows[1].cells
                //console.log("End of list -- go back to beginning");
                autoplayer_link = myTableData.rows[1].cells[2].innerHTML;
                if(x[3].innerHTML == 1){
                  autoplayer_link = autoplayer_link.substring(0,autoplayer_link.length-1);
                }
                runningIndex = 1; //Set to first index
                //console.log("Autoplay link: " + autoplayer_link)
              }else{  //Has next
                var x = document.getElementById("myTableData").rows[runningIndex+1].cells
                //console.log("Going to next video on list")
                autoplayer_link = myTableData.rows[runningIndex+1].cells[2].innerHTML;
                if(x[3].innerHTML == 1){
                  autoplayer_link = autoplayer_link.substring(0,autoplayer_link.length-1);
                }
                runningIndex = runningIndex + 1;
              }
            }else{
              //Static link
              alert("Nothing here")
              //console.log("Nothing in list ;(")
              return;
            }
            socket.emit('server autoplay', autoplayer_link)
            //console.log("Video done -- booting autoplay");
          }else{
            //console.log("Video done -- autoplay undetected");
          }
        }else if(player.getPlayerState() == 1){
          //console.log("playing -- start progress bar")
          setInterval(function(){
            if(player == null || progressBar == null){
              return;
            }
            var fraction = player.getCurrentTime()/player.getDuration()*100;
            // //console.log("Play current time: " + player.getCurrentTime());
            // //console.log("Total: " + player.getDuration());
            // //console.log("Fraction: " + fraction);
            // //console.log("Fraction: " + fraction);
            progressSquare.css("left",fraction.toString() + "%");
          },200);

        }else if(player.getPlayerState() == 2){
          //NEED TO CLEAR INTERVAL FUNCTION
          //console.log("paused")
        }
      }

      function pauseVideo(){
        socket.emit('server pause');
        //player.pauseVideo();   //Need to emit to server to do on all client
      }

      function playVideo(){
        socket.emit('server play')
        //player.playVideo();   //Need to emit to server to do on all clients
      }

      function test(){  //Attempt to change videos on everyone
        // var x = "0VvMKJ4IuWM"
        // player.loadVideoById(x);
        // socket.emit('server autoplay');
        progressBarLoop();
        //console.log("Calling progress bar loop")

      }
      //Stuff for existing user
      socket.on('find playing vid',function(){
        if(!newUser){
          //Find what vid and time here
          var time = player.getCurrentTime()
          var newVidId = player.getVideoData()['video_id'];
          var updateDetails = [newVidId, time]
          socket.emit('update to playing vid',updateDetails);
          //console.log("Updating to palying vid emitted -- existing user")
        }else if(newUser && totalUsers <= 1){
          newUser = false;  //Only user on site
          //console.log("User has been set to false -- 1st user")
        }else{
          //console.log("Missed both tests -- i am a new user")
          //Waiting to turn false
        }
      });
      //Stuff for new user
      socket.on('update client playing vid', function(newVideo){
        //console.log("Update to playing vid recieved -client")
        if(newUser){
          //player.loadVideoById(newVideo[0]);
          // var x = "0VvMKJ4IuWM"
          // player.loadVideoById(x)
          // player.seekTo(newVideo[1]);
          //Need to wait for video to be ready
          //console.log("here")
          //console.log("Player state: " + player.getPlayerState())
          //Method 1
          setTimeout(function(){  //Optimize later(use ready state)
            player.loadVideoById({'videoId': newVideo[0],
                 'startSeconds': newVideo[1]+1.5
               });
          }, 500);
          newUser = false;
        }else{
          //console.log("Nani")
        }
        //console.log("new vid[0]" + newVideo[0])
        //console.log("new vid[1]" + newVideo[1])
      });

      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '480',
          width: '720',
          videoId: 'XPkNhfWju28',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          },
          playerVars:{
            'origin':'localhost:1111'
          }
        });
      }

      function onPlayerReady(event) {
        event.target.playVideo();
      }

      function autoplay(){
        socket.emit('server autoplay');
      }

      function printRow(){
        //console.log("Current row num: " + rowNum);
      }
      //TO DOOOOOOO
      //Need to add enhanced search function -- may need to use YTAPI -- done
      //Need to add seeking as well as play/pause on video -- done 9/6
      //seeking() need to implement timeline -- done 9/6
      //Can probably change how video submission works -- done
      //-- call function that emits to socket and pass the link -- done
      //Need to add chat functionality? --skip prolly
      //Need to add login? --skip prolly
      //Site: https://noob-chat-test.herokuapp.com/
      //Will rename later

      //Make syncing function better rather than +1.5 -- done? not horrible actually
      //Turn table into scrollable --done
      //Enhance progress bar for draggability --todo
      //REFER  to other ytproject for mongodb connection (problem was ip listing...fokme)
      //Make hovering over the table give a darker background to view names
      //90% progress now??
    </script>
  <script src="https://apis.google.com/js/client.js?onload=init"></script>

  </body>
</html>
